#
# This file is part of gtkD.
# 
# gtkD is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version, with
# some exceptions, please read the COPYING file.
# 
# gtkD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with gtkD; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
#


#
###
#####
# Definitions for wrapping gtk gl ext GL
#####
###
#


addTypedefs: start

public import gtkc.glibtypes;
public import gtkc.gdktypes;
alias uint VisualID;

addTypedefs: end

addAliases: start
addAliases: end

addEnums: start
addEnums: end

addStructs: start
addStructs: end

addTypes: start
addTypes: end

addFuncts: start
addFuncts: end

addUnions: start
addUnions: end

addConstants: start
addConstants: end

# must start with wrap

wrap: glgdk
#srcout: srcgl

###########################################################
### GL ####################################################
###########################################################

file: gtkglext-gdkglinit.html
class: GLdInit
prefix: gdk_gl_
import: glib.Str

inout: gdk_gl_init argv
array: gdk_gl_init argv argc
inout: gdk_gl_init_check argv
array: gdk_gl_init_check argv argc
outFile: GLdInit

file: gtkglext-gdkglquery.html
class: GLQuery
prefix: gdk_gl_query_
prefix: gdk_gl_
import: glib.Str
import: gdk.Display
structWrap: GdkDisplay* Display

out: gdk_gl_query_version major
out: gdk_gl_query_version minor
out: gdk_gl_query_version_for_display major
out: gdk_gl_query_version_for_display minor

outFile: GLQuery

file: gtkglext-gdkglconfig.html
struct: GdkGLConfig
class: GLConfig
prefix: gdk_gl_config_
import: std.stdio
import: glib.Str
import: gdk.Screen
import: gdk.Visual
structWrap: GdkScreen* Screen
structWrap: GdkVisual* Visual

array: gdk_gl_config_new attrib_list n_attribs
array: gdk_gl_config_new_for_screen attrib_list n_attribs
out: gdk_gl_config_get_attrib value

code: start
	/**
	 * Creates a mew OpenGL frame buffer configuration that match the specified display mode,
	 * or the fallback mode.
	 * Params:
	 *  mode = display mode bit mask.
	 *  fallback = Try this mode if first fails.
	 * Throws: ConstructionException if configuring GL fails
	 */
	this(GLConfigMode mode, GLConfigMode fallback)
	{
		
		gdkGLConfig = cast(GdkGLConfig*)gdk_gl_config_new_by_mode(mode);
		if ( gdkGLConfig is null )
		{
			version(Tango)
			{
				Stdout("*** Cannot find the double-buffered visual.").newline;
				Stdout("*** Trying single-buffered visual.").newline;
			}
			else
			{
				writefln("*** Cannot find the double-buffered visual.");
				writefln("*** Trying single-buffered visual.");
			}
			gdkGLConfig = cast(GdkGLConfig*)gdk_gl_config_new_by_mode(fallback);
		}
		if ( gdkGLConfig is null )
		{
			version(Tango)
			{
				Stdout("*** No appropriate OpenGL-capable visual found.").newline;
			}
			else
			{
				writefln("*** No appropriate OpenGL-capable visual found.");
			}
			throw new ConstructionException("GL configure failed");
		}
		this(gdkGLConfig);
	}
code: end
outFile: GLConfig

file: gtkglext-gdkglcontext.html
struct: GdkGLContext
class: GLContext
prefix: gdk_gl_context_
import: glgdk.GLConfig
import: glgdk.GLDrawable
import: glgdk.GLDrawableIF
structWrap: GdkGLConfig* GLConfig
structWrap: GdkGLContext* GLContext
structWrap: GdkGLDrawable* GLDrawableIF
text: start
gdk_gl_context_make_current ()
gboolean gdk_gl_context_make_current(GdkGLContext  *glcontext, GdkGLDrawable *draw, GdkGLDrawable *read);
<hr>
gdk_gl_context_release_current ()
void gdk_gl_context_release_current ()
text: end
outFile: GLContext

file: gtkglext-gdkgldrawable.html
struct: GdkGLDrawable
class: GLDrawableT
template: TStruct
prefix: gdk_gl_drawable_
import: glgdk.GLConfig
structWrap: GdkGLConfig* GLConfig
interface: GLDrawableIF
outFile: GLDrawableT

file:
class: GLDrawable
extend: GObject
implements: GLDrawableIF

# imports for GLDrawable Interface
import: glgdk.GLDrawableT
import: glgdk.GLDrawableIF

code: start
	// Minimal implementation.
	mixin GLDrawableT!(GdkGLDrawable);

	/** the main Gtk struct as a void* */
	protected override void* getStruct()
	{
		return cast(void*)gdkGLDrawable;
	}
	
	/**
	 * Sets our main struct and passes it to the parent class
	 */
	public this (GdkGLDrawable* gdkGLDrawable)
	{
		super(cast(GObject*)gdkGLDrawable);
		this.gdkGLDrawable = gdkGLDrawable;
	}
code: end
outFile: GLDrawable

file: gtkglext-gdkglwindow.html
struct: GdkGLWindow
class: GLWindow
implements: GLDrawableIF
prefix: gdk_gl_window_
import: gdk.Window
import: glgdk.GLConfig
structWrap: GdkWindow* Window
structWrap: GdkGLConfig* GLConfig
structWrap: GdkGLWindow* GLWindow

# imports for GLDrawable Interface
import: glgdk.GLDrawableT
import: glgdk.GLDrawableIF

code: start
	// add the GLDrawable capabilities
	mixin GLDrawableT!(GdkGLWindow);
code: end
openFile: GLWindow

file: gtkglext-gdkgltokens.html
closeFile: GLWindow

#file: gtkglext-gdkglx.html
#outFile: GLX11

#file: gtkglext-gdkglversion.html
#outFile: GLdVersion

