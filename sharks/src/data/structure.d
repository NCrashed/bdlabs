// Written in D programming language
/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module data.structure;

import orm.orm;
import std.datetime;

struct AttackCases
{
	@PrimaryKey
	int 		AttackCaseID;

	Date 		AttackDate;
	int 		DayTime;
	string 		CaseDescr;
	int			ViewDist;

	@ForeignKey!Places("PlaceID")
	int			PlaceID;
}

struct InformationSources
{
	@PrimaryKey
	int 		InformationSourceID;

	@ForeignKey!AttackCases("AttackCaseID")
	int 		AttackCaseID;

	string		SourceName;
	string		Url;
	string		MessageCopy;
	bool		IsOffical;
}

enum PlacesType:int
{
	SHALLOW_WATER,
	DEEP_WATER,
	BEACH,
	RIVER
}

struct Places
{
	@PrimaryKey
	int			PlaceID;

	string		PlaceName;
	string		Country;
	string		PlaceDescr;
	int 		PlaceType;
}

struct Reasons
{
	@PrimaryKey
	int 		ReasonID;

	string		ReasonName;
	string		BehaveDescr;
	bool		IsProvoked;
}

struct SharkSpieces
{
	@PrimaryKey
	int 		SpieceID;

	string		SpieceName;
	string		SpieceDescr;
	int 		AverageSize;
	string		Ration;
	string 		Photos;
	int 		HazardRate;
}

struct Habitats
{
	@PrimaryKey
	int 		HabitatID;

	string		HabitatName;
	long		Area;
	float		Urbanization;
}

struct Victims
{
	@PrimaryKey
	int 		VictimID;

	string		VictimName;
	Date 		BirthDate;
	string		Career;
	string		DamageDescr;
	string		Destiny;
}

struct Property
{
	@PrimaryKey
	int 		PropertyID;

	string		PropertyType;
	long		Damage;
	string		DamageDescr;
}

struct Reason2AttackCase
{
	@ForeignKey!Reasons("ReasonID")
	int 	ReasonID;

	@ForeignKey!AttackCases("AttackCaseID")
	int 	AttackCaseID;
}

struct Spiece2AttackCase
{
	@ForeignKey!SharkSpieces("SpieceID")
	int 	SpieceID;

	@ForeignKey!AttackCases("AttackCaseID")
	int 	AttackCaseID;
}

struct Property2AttackCase
{
	@ForeignKey!Property("PropertyID")
	int 	PropertyID;

	@ForeignKey!AttackCases("AttackCaseID")
	int 	AttackCaseID;
}

struct Victim2AttackCase
{
	@ForeignKey!Victims("VictimID")
	int 	VictimID;

	@ForeignKey!AttackCases("AttackCaseID")
	int 	AttackCaseID;
}

struct Habitat2Spiece
{
	@ForeignKey!Habitats("HabitatID")
	int 	HabitatID;

	@ForeignKey!SharkSpieces("SpieceID")
	int 	SpieceID;
}